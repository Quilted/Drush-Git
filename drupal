#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'commander/import'
require 'fileutils'
require 'securerandom'

program :version, '0.1'
program :description, 'Setup an initial drupal setup'

command :setup do |c|
  c.syntax = 'drupal setup <project_name> [options]'
  c.description = 'Creates and installs a new Drupal project.'
  c.example 'Create a project called Superapp.', 'drupal setup "Superapp"'
  c.option '--gitignore FILE', String, 'Path to .gitignore file'
  c.option '--db_name NAME', String, 'Database name'
  c.action do |args, options|
    if args[0].nil?
      puts "Please specify a project name."
    else
      # Set constants.
      PROJECT_NAME = sanitize_filename args[0]
      SOURCE_PATH = File.expand_path(File.dirname(__FILE__))

      # Set optional flags.
      options.default \
        :gitignore  => "#{ SOURCE_PATH }/gitignore.txt",
        :db_name => PROJECT_NAME

      # Ask for key inputs.
      db_user = ask ">> Database user: "
      db_password = password ">> Database password: "
      drupal_email = ask ">> Drupal email: "
      project_machine_name = ask ">> Project machine name (3-5 characters long, used for theme and general feature): "

      # Go through the process.
      create_file_structure
      create_drushrc
      create_gitignore options.gitignore
      download_drupal "#{ SOURCE_PATH }/d7.make"
      create_drushrc_symlink
      copy_features
      copy_install_profile
      install_drupal "quilted_profile", db_user, db_password, drupal_email
      create_subtheme project_machine_name
      create_general_feature project_machine_name
      create_patches_directory
      enable_quilted_responsive
      setup_git
    end
  end
end

def sanitize_filename(filename)
  return filename.strip do |name|
    # NOTE: File.basename doesn't work right with Windows paths on Unix
    # get only the filename, not the whole path
    name.gsub! /^.*(\\|\/)/, ''

    # Finally, replace all non alphanumeric, underscore or periods with underscore
    # name.gsub! /[^\w\.\-]/, '_'
    # Basically strip out the non-ascii alphabets too and replace with x. You don't want all _ :)
    name.gsub!(/[^0-9A-Za-z.\-]/, 'x')
  end
end

def create_file_structure
  puts '===> Setting up file structure...'
  FileUtils.mkdir_p "#{ PROJECT_NAME }/databases"
  FileUtils.mkdir_p "#{ PROJECT_NAME }/private_files"
  FileUtils.touch "#{ PROJECT_NAME }/private_files/PLACEHOLDER.md"
  FileUtils.mkdir_p "#{ PROJECT_NAME }/tmp_files"
  FileUtils.touch "#{ PROJECT_NAME }/tmp_files/PLACEHOLDER.md"
  FileUtils.mkdir_p "#{ PROJECT_NAME }/tests"
  FileUtils.touch "#{ PROJECT_NAME }/tests/PLACEHOLDER.md"
end

def create_drushrc
  puts "===> Setting up drushrc.php..."
  FileUtils.cp "#{ SOURCE_PATH }/dgb/example-dgb.drushrc.php", "#{ PROJECT_NAME }/drushrc.php"
end

def create_gitignore(gitignore)
  puts "===> Setting up .gitignore..."
  FileUtils.cp "#{ gitignore }", "#{ PROJECT_NAME }/.gitignore"
end

def download_drupal(makefile)
  puts "===> Downloading Drupal and modules..."
  system %{ drush make --prepare-install #{ makefile } #{ PROJECT_NAME }/www }
end

def create_drushrc_symlink
  puts "===> Creating drushrc.php symlink..."
  File.symlink("../drushrc.php", "#{ PROJECT_NAME }/www/drushrc.php")
end

def copy_install_profile
  puts "===> Copying install profile..."
  FileUtils.cp_r "#{ SOURCE_PATH }/profiles/quilted_profile", "#{ PROJECT_NAME }/www/profiles/quilted_profile"
end

def copy_features
  puts "===> Copying custom modules..."
  path = "#{ PROJECT_NAME }/www/sites/all/modules/custom"
  FileUtils.mkdir_p path
  FileUtils.cp_r "#{ SOURCE_PATH }/modules/.", "#{ path }"
end

def install_drupal(install_profile, db_user, db_password, drupal_email)
  puts "===> Installing Drupal..."
  admin_password = SecureRandom.base64
  si_command = "drush si #{ install_profile } --site-name=#{ PROJECT_NAME } --site-mail=#{ drupal_email } --account-name=admin --account-pass=#{ admin_password } --account-mail=#{ drupal_email } --db-url=mysql://#{ db_user }:#{ db_password }@localhost:/#{ PROJECT_NAME } -y"

  FileUtils.cd "#{ PROJECT_NAME }/www"
  system %{ #{ si_command } }
  FileUtils.cd "../.."
end

def create_subtheme(project_machine_name)
  puts "===> Creating Omega subtheme..."
  FileUtils.cd "#{ PROJECT_NAME }/www"
  system %{ drush en omega -y; drush cc all }
  subtheme_command = "drush omega-subtheme #{ project_machine_name }_theme --enable --set-default --with-libraries"
  system %{ #{ subtheme_command } }
  FileUtils.cp "#{ SOURCE_PATH }/gitignore_theme.txt", "sites/all/themes/#{ project_machine_name }_theme/.gitignore"
  FileUtils.cd "../.."
end

def create_general_feature(project_machine_name)
  puts "===> Creating general feature..."
  components = [
    # Variables
    'variable:admin_theme',
    'variable:clean_url',
    'variable:date_api_version',
    'variable:date_default_timezone',
    'variable:date_first_day',
    'variable:date_format_long',
    'variable:date_format_medium',
    'variable:date_format_short',
    'variable:delta_blocks_branding_logo_linked',
    'variable:delta_blocks_branding_logo_render',
    'variable:delta_blocks_branding_site_name_hidden',
    'variable:delta_blocks_branding_site_name_linked',
    'variable:delta_blocks_branding_site_slogan_hidden',
    'variable:delta_blocks_breadcrumb_current',
    'variable:delta_blocks_breadcrumb_title_hidden',
    'variable:delta_blocks_logo_linked',
    'variable:delta_blocks_page_title_hidden',
    'variable:delta_blocks_site_name_hidden',
    'variable:delta_blocks_site_name_linked',
    'variable:delta_blocks_site_slogan_hidden',
    'variable:features_ignored_orphans',
    'variable:file_private_path',
    'variable:file_temporary_path',
    'variable:node_admin_theme',
    'variable:node_options_page',
    'variable:node_submitted_page',
    'variable:path_alias_whitelist',
    'variable:pathauto_blog_pattern',
    'variable:pathauto_node_pattern',
    'variable:pathauto_punctuation_hyphen',
    'variable:pathauto_taxonomy_term_pattern',
    'variable:pathauto_user_pattern',
    'variable:site_404',
    'variable:site_default_country',
    'variable:site_mail',
    'variable:site_name',
    'variable:theme_default',
    'variable:user_admin_role',
    'variable:user_register',

    # Fields
    'field_instance:node-page-body',

    # Filters
    'filter:ds_code',

    # Node
    'node:page',

    # Roles
    'user_role:administrator',

    # Context
    'context:internal',
    'context:sitewide']

  # Permissions
  permissions = [
    'user_permission:view advanced help topic',
    'user_permission:view advanced help popup',
    'user_permission:view advanced help index',
    'user_permission:show format tips',
    'user_permission:show more format tips link',
    'user_permission:show format selection for node',
    'user_permission:show format selection for taxonomy_term',
    'user_permission:show format selection for file',
    'user_permission:show format selection for user',
    'user_permission:administer blocks',
    'user_permission:administer boxes',
    'user_permission:edit boxes',
    'user_permission:administer contexts',
    'user_permission:access contextual links',
    'user_permission:administer delta blocks',
    'user_permission:admin_view_modes',
    'user_permission:admin_fields',
    'user_permission:admin_classes',
    'user_permission:admin_display_suite',
    'user_permission:administer features',
    'user_permission:manage features',
    'user_permission:administer filters',
    'user_permission:use text format ds_code',
    'user_permission:administer menu',
    'user_permission:bypass node access',
    'user_permission:administer content types',
    'user_permission:administer nodes',
    'user_permission:access content overview',
    'user_permission:access content',
    'user_permission:view own unpublished content',
    'user_permission:view revisions',
    'user_permission:revert revisions',
    'user_permission:delete revisions',
    'user_permission:create page content',
    'user_permission:edit own page content',
    'user_permission:edit any page content',
    'user_permission:delete own page content',
    'user_permission:delete any page content',
    'user_permission:administer url aliases',
    'user_permission:create url aliases',
    'user_permission:administer pathauto',
    'user_permission:notify of path changes',
    'user_permission:administer redirects',
    'user_permission:administer search',
    'user_permission:search content',
    'user_permission:use advanced search',
    'user_permission:administer modernizr',
    'user_permission:administer shortcuts',
    'user_permission:customize shortcut links',
    'user_permission:switch shortcut sets',
    'user_permission:administer modules',
    'user_permission:administer site configuration',
    'user_permission:administer themes',
    'user_permission:administer software updates',
    'user_permission:administer actions',
    'user_permission:access administration pages',
    'user_permission:access site in maintenance mode',
    'user_permission:view the administration theme',
    'user_permission:access site reports',
    'user_permission:block IP addresses',
    'user_permission:administer taxonomy',
    'user_permission:access toolbar',
    'user_permission:administer permissions',
    'user_permission:administer users',
    'user_permission:access user profiles',
    'user_permission:change own username',
    'user_permission:cancel account',
    'user_permission:select account cancellation method',
    'user_permission:administer views',
    'user_permission:access all views',
    'user_permission:administer xmlsitemap',
    'user_permission:access draggableviews',
    'user_permission:administer custom search',
    'user_permission:administer fieldgroups',
    'user_permission:context ajax block access',
    'user_permission:generate features',
    'user_permission:use custom search']

  feature_name = "#{ project_machine_name }_general"
  si_command= "drush fe #{ feature_name } " + components.join(' ') + " " + permissions.map { |i| "'" + i.to_s + "'" }.join(' ') + " --destination='sites/all/modules/custom' -y"

  FileUtils.cd "#{ PROJECT_NAME }/www"
  system %{ #{ si_command } }
  system %{ drush en #{ feature_name } -y }
  FileUtils.cd "../.."
end

def create_patches_directory
  puts "===> Copying patches..."
  path = "#{ PROJECT_NAME }/www/sites/all/patches"
  FileUtils.mkdir_p path
  FileUtils.cp_r "#{ SOURCE_PATH }/patches/.", "#{ path }"
end

def enable_quilted_responsive
  puts "===> Enabling quilted_responsive feature..."
  FileUtils.cd "#{ PROJECT_NAME }/www"
  system %{ drush en quilted_responsive -y }
  FileUtils.cd "../.."
end

def setup_git
  puts "===> Setting up git repo..."
  FileUtils.cd PROJECT_NAME
  system %{ git init; git add -A; git commit --quiet -m "Initial commit." }
  FileUtils.cd "www"
  system %{ drush dgb-backup --m="Initial database backup." }
  FileUtils.cd "../.."
  puts "===> Finished setting up git."
end

